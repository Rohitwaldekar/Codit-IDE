package application;

import java.io.File;
import javafx.application.Application;
import javafx.event.ActionEvent;
import javafx.event.EventHandler;
import javafx.geometry.Orientation;
import javafx.scene.Scene;
import javafx.scene.control.Alert;
import javafx.scene.control.Button;
import javafx.scene.control.Menu;
import javafx.scene.control.MenuBar;
import javafx.scene.control.MenuItem;
import javafx.scene.control.SplitPane;
import javafx.scene.control.Tab;
import javafx.scene.control.TabPane;
import javafx.scene.control.TextArea;
import javafx.scene.control.TextField;
import javafx.scene.control.ToolBar;
import javafx.scene.control.TreeItem;
import javafx.scene.control.TreeView;
import javafx.scene.image.Image;
import javafx.scene.image.ImageView;
import javafx.scene.control.Alert.AlertType;
import javafx.scene.layout.BorderPane;
import javafx.scene.web.WebEngine;
import javafx.scene.web.WebHistory;
import javafx.scene.web.WebView;
import javafx.stage.DirectoryChooser;
import javafx.stage.Stage;


public class Codit extends Application{
	
	private TabPane rightPane = new TabPane();
	private TabPane leftPane = new TabPane();
	private TabPane bottomPane = new TabPane();

    public static Image rootIcon =new Image(ClassLoader.getSystemResourceAsStream("Folder.png"));

	
    @Override
    public void start (Stage stage) {
    	BorderPane outer = new BorderPane();
    	
    	MenuBar menuBar = new MenuBar();
    	 
// --- Menu File
        Menu menuFile = new Menu("File");

        MenuItem new1 = new MenuItem("New");
        MenuItem open = new MenuItem("Open");
        MenuItem save = new MenuItem("Save");
        MenuItem saveAs = new MenuItem("Save As");

        menuFile.getItems().addAll(new1,open,save,saveAs);
 
// --- Menu Edit
        Menu menuEdit = new Menu("Edit");
        
        MenuItem undo = new MenuItem("Undo");
        MenuItem redo = new MenuItem("Redo");
        MenuItem copy = new MenuItem("Copy");
        MenuItem paste = new MenuItem("Paste");
        MenuItem cute = new MenuItem("Cute");
        MenuItem selectAll = new MenuItem("Select All");

        menuEdit.getItems().addAll(undo,redo,copy,paste,cute,selectAll);

// --- Menu View
        Menu menuView = new Menu("View");
 
        menuBar.getMenus().addAll(menuFile, menuEdit, menuView);
    	
    	BorderPane inner = new BorderPane();
    	
    	ToolBar toolBar = new ToolBar();
    	Button but = new Button("Click Me !");
    	
    	but.setOnAction(new EventHandler<ActionEvent>() {
			
			@Override
			public void handle(ActionEvent arg0) {
			
				rightPane.getTabs().addAll(generateTab("New Tab created by me !"));
			}
		});
    	toolBar.getItems().add(but);
    	inner.setTop(toolBar);
    	
    	SplitPane root1 = new SplitPane();
    	root1.setOrientation(Orientation.VERTICAL);

//Console and Browser
        Tab console = new Tab("Console");
        console.setClosable(false);
        
        BorderPane content1 = new BorderPane();
        TextArea text1 = new TextArea();
        content1.setCenter(text1);
        console.setContent(content1);
        
        Tab browser = new Tab("Browser");
        browser.setClosable(false);
        
        BorderPane content3 = new BorderPane();

		ToolBar tool = new ToolBar();
		Button previous = new Button("Previous");
		tool.getItems().add(previous);

		Button next = new Button("Next");
		tool.getItems().add(next);

		Button go = new Button("Go");
		tool.getItems().add(go);

		TextField tf = new TextField();
		tf.setPrefHeight(25.0);
		tf.setPrefWidth(600.0);
		
		tool.getItems().add(tf);
		
		WebView webview = new WebView();
		
		WebEngine engine = webview.getEngine();
		
		String htLink = "http://";
		
		engine.load(htLink+"www.google.com");
		
		WebHistory history = engine.getHistory();
		
		previous.setOnAction(new EventHandler<ActionEvent>() {
			
			@Override
			public void handle(ActionEvent arg0) {
				
				history.go(-1);
			}
		});
		
		go.setOnAction(new EventHandler<ActionEvent>() {
		
			@Override
			public void handle(ActionEvent arg0) {
				
				String addLink = tf.getText().toString();
				engine.load(htLink+addLink);
			}
		
		});
		
		
		next.setOnAction(new EventHandler<ActionEvent>() {
			
			@Override
			public void handle(ActionEvent arg0) {
				
				history.go(1);
			}
		
		});		
		
		content3.setCenter(webview);
		content3.setTop(tool);
		browser.setContent(content3);
        
        bottomPane.getTabs().addAll(console,browser);

    	SplitPane.setResizableWithParent(bottomPane, Boolean.FALSE);	
    	
//upper pane
    	SplitPane paneFree = new SplitPane();
    	
//File System        
        Tab fileSystem = new Tab("File System");
        BorderPane b = new BorderPane();
        fileSystem.setContent(b);
        fileSystem.setClosable(false);
        
            
	        //Button c = new Button("Load Folder");
	        
	        open.setOnAction(new EventHandler<ActionEvent>() {
	        	
	            @Override 
	            public void handle(ActionEvent e) {
	            
	            	DirectoryChooser directoryChooser = new DirectoryChooser();
	            	
	                directoryChooser.setInitialDirectory(new File(System.getProperty("user.home")));
	                
	                File choice = directoryChooser.showDialog(stage);
	                
	                    if(choice == null || ! choice.isDirectory()) {
	                
	                	Alert alert = new Alert(AlertType.ERROR);
	                	
	                    alert.setHeaderText("File Not Found.");
	                    
	                    alert.setContentText("Please Select file !");

	                    alert.showAndWait();
	                } 
	                else {
	    
	                	TreeView<String> fileTree = new TreeView<String>(getNodesForDirectory(choice));
	                	//fileTree.setRoot(getNodesForDirectory(choice));
	        	        b.setCenter(fileTree);

	                }
	            }
	        });
	        
	       // b.setCenter(fileTree);

        
        
//Variables
        Tab variables = new Tab("Variables");
        variables.setClosable(false);
        
        BorderPane content2 = new BorderPane();
        TextArea text2 = new TextArea();
        content2.setCenter(text2);
        variables.setContent(content2);
        
        leftPane.getTabs().addAll(fileSystem,variables);

        rightPane.getTabs().addAll(generateTab("Tab 1"),generateTab("Tab 2"), generateTab("Tab 3"), generateTab("Tab N"));

        rightPane.setTabClosingPolicy(TabPane.TabClosingPolicy.ALL_TABS);
        
    	paneFree.getItems().addAll(leftPane, rightPane);
    
    	
    	root1.getItems().addAll(paneFree, bottomPane);

    	inner.setCenter(root1);
    	
    	outer.setTop(menuBar);
    	outer.setCenter(inner);
    	stage.getIcons().add(new Image("Folder.png"));
    	stage.setTitle("Codit IDE");
    	stage.setScene(new Scene(outer,1300,700));
    	stage.show();
        }

//New TextFeild Generator
    public Tab generateTab(String name){
        Tab result = new Tab(name);
        
        BorderPane content = new BorderPane();
        TextArea text = new TextArea();
        content.setCenter(text);
        result.setContent(content);
        return result;
    }
    /*
    private boolean isDirectory;
    public boolean isDirectory(){return(this.isDirectory);}
    */
    public TreeItem<String> getNodesForDirectory(File directory) { //Returns a TreeItem representation of the specified directory
    	
    	TreeItem<String> root = new TreeItem<String>(directory.getName());
    /*	if(!root.isLeaf() && root.isExpanded())
    	{
            root.setGraphic(new ImageView(rootIcon));
    	}
    	*/
    	for(File f : directory.listFiles()) {
            System.out.println("Loading " + f.getName());
            if(f.isDirectory()) { //Then we call the function recursively
                root.setGraphic(new ImageView(rootIcon));
                System.out.println("##Parent");
                root.getChildren().add(getNodesForDirectory(f));
            } else {
                System.out.println("##Child");
               // root.setGraphic(new ImageView(rootIcon));
                root.getChildren().add(new TreeItem<String>(f.getName()));
            }
        }
        return root;
    }

    public static void main(String[] args){
        Codit.launch(args);
    }
}
