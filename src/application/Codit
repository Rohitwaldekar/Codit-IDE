package application;

import javafx.application.Application;
import javafx.event.ActionEvent;
import javafx.event.EventHandler;
import javafx.geometry.Orientation;
import javafx.scene.Node;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.Menu;
import javafx.scene.control.MenuBar;
import javafx.scene.control.MenuItem;
import javafx.scene.control.SplitPane;
import javafx.scene.control.Tab;
import javafx.scene.control.TabPane;
import javafx.scene.control.TextArea;
import javafx.scene.control.TextField;
import javafx.scene.control.ToolBar;
import javafx.scene.layout.BorderPane;
import javafx.scene.web.WebEngine;
import javafx.scene.web.WebHistory;
import javafx.scene.web.WebView;
import javafx.stage.Stage;


public class Codit extends Application{
    @Override
    public void start (Stage stage) {
    	BorderPane outer = new BorderPane();
    	
    	MenuBar menuBar = new MenuBar();
    	 
        // --- Menu File
        Menu menuFile = new Menu("File");

        MenuItem new1 = new MenuItem("New");
        MenuItem open = new MenuItem("Open");
        MenuItem save = new MenuItem("Save");
        MenuItem saveAs = new MenuItem("Save As");

        menuFile.getItems().addAll(new1,open,save,saveAs);
 
        // --- Menu Edit
        Menu menuEdit = new Menu("Edit");
        
        MenuItem undo = new MenuItem("Undo");
        MenuItem redo = new MenuItem("Redo");
        MenuItem copy = new MenuItem("Copy");
        MenuItem paste = new MenuItem("Paste");
        MenuItem cute = new MenuItem("Cute");
        MenuItem selectAll = new MenuItem("Select All");

        menuEdit.getItems().addAll(undo,redo,copy,paste,cute,selectAll);

        // --- Menu View
        Menu menuView = new Menu("View");
 
        menuBar.getMenus().addAll(menuFile, menuEdit, menuView);
    	
    	BorderPane inner = new BorderPane();
    	
    	ToolBar toolBar = new ToolBar();
    	Button but = new Button("Click Me !");
    	toolBar.getItems().add(but);
    	inner.setTop(toolBar);
    	
    	SplitPane root1 = new SplitPane();
    	root1.setOrientation(Orientation.VERTICAL);

//lower pane

    	TabPane bottomPane = new TabPane();
        Tab consol = new Tab("Consol");
        consol.setClosable(false);
        
        BorderPane content1 = new BorderPane();
        TextArea text1 = new TextArea();
        content1.setCenter(text1);
        consol.setContent(content1);
        
        Tab browser = new Tab("Browser");
        browser.setClosable(false);
        
        BorderPane content3 = new BorderPane();

		ToolBar tool = new ToolBar();
		Button b1 = new Button("Previous");
		tool.getItems().add(b1);

		Button b2 = new Button("Next");
		tool.getItems().add(b2);

		Button b3 = new Button("Go");
		tool.getItems().add(b3);

		TextField tf = new TextField();
		tf.setPrefHeight(25.0);
		tf.setPrefWidth(600.0);
		
		tool.getItems().add(tf);
		
		WebView webview = new WebView();
		
		WebEngine engine = webview.getEngine();
		
		String htLink = "http://";
		
		engine.load(htLink+"www.google.com");
		
		WebHistory history = engine.getHistory();
		
		b1.setOnAction(new EventHandler<ActionEvent>() {
			
			@Override
			public void handle(ActionEvent arg0) {
				
				history.go(-1);
			}
		});
		
		b3.setOnAction(new EventHandler<ActionEvent>() {
		
			@Override
			public void handle(ActionEvent arg0) {
				
				String addLink = tf.getText().toString();
				engine.load(htLink+addLink);
			}
		
		});
		
		
		b2.setOnAction(new EventHandler<ActionEvent>() {
			
			@Override
			public void handle(ActionEvent arg0) {
				
				history.go(1);
			}
		
		});		
		
		content3.setCenter(webview);
		content3.setTop(tool);
		browser.setContent(content3);
        
        bottomPane.getTabs().addAll(consol,browser);

    	SplitPane.setResizableWithParent(bottomPane, Boolean.FALSE);
    	
    	
//upper pane
    	SplitPane paneFree = new SplitPane();
    	creacreateVerticlepane(paneFree);
    	
    	root1.getItems().addAll(paneFree, bottomPane);

    	inner.setCenter(root1);
    	
    	outer.setTop(menuBar);
    	outer.setCenter(inner);
    	
    	stage.setScene(new Scene(outer,1300,700));
    	stage.show();
        }
    public Tab generateTab(String name){
        Tab result = new Tab(name);
        BorderPane content = new BorderPane();
        TextArea text = new TextArea();
        content.setCenter(text);
        result.setContent(content);
        return result;
    }
    

    public static void main(String[] args){
        Codit.launch(args);
    }


    public void creacreateVerticlepane(SplitPane root2)
    {
    	TabPane leftPane = new TabPane();
        
        Tab fileSystem = new Tab("File System");
        fileSystem.setClosable(false);
        
        Tab variables = new Tab("Variables");
        variables.setClosable(false);
        
        BorderPane content2 = new BorderPane();
        TextArea text2 = new TextArea();
        content2.setCenter(text2);
        variables.setContent(content2);
        
        leftPane.getTabs().addAll(fileSystem,variables);

        TabPane rightPane = new TabPane();
        rightPane.getTabs().addAll(generateTab("Tab 1"),generateTab("Tab 2"), generateTab("Tab 3"), generateTab("Tab N"));

    	root2.getItems().addAll(leftPane, rightPane);
    }

    public static class TabPaneWrapper{
        SplitPane split;

        public TabPaneWrapper(Orientation o, double splitLocation){
            split = new SplitPane();

            //Change the CSS (uncomment if using an external css)
            //split.getStylesheets().add("test.css");

            split.setOrientation(o);
            split.setDividerPosition(0, splitLocation);
        }

        public void addNodes(final Node node1, final Node node2){
            //Add to the split pane
            split.getItems().addAll(node1, node2);
        }

        public Parent getNode(){
            return split;
        }
    }

}
